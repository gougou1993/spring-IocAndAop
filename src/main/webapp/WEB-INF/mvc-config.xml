<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Uncomment and your base-package here:
         <context:component-scan
            base-package="org.springframework.samples.web"/>  -->

	<context:component-scan base-package="com.zhong.web"/>
	
	<!-- don't handle the static resource 静态资源 -->
    <mvc:default-servlet-handler />
    
	<!-- 使用注解必须 配置这个-->
    <mvc:annotation-driven />
	
	<!-- 视图解析器 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	     <!-- Example: a logical view name of 'showMessage' is mapped to '/WEB-INF/jsp/showMessage.jsp' -->
	     <property name="prefix" value="/WEB-INF/view/"/>
	     <property name="suffix" value=".jsp"/>
	</bean>
	
	<!-- upload settings -->
    <bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="102400000"></property>
    </bean>
    
    <!-- configure SimpleMappingExceptionResolver  另一种处理全局异常的方法 -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.ArithmeticException">error</prop>
                <prop key="com.zhong.exception.SpringException">exceptionPage</prop>
            </props>
        </property>
         <property name="defaultErrorView" value="error"/><!-- 缺省异常 -->
    </bean>
    
    
    <!-- interceptor setting -->
    <mvc:interceptors>
    	<!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
    	<bean class="com.zhong.interceptor.AllInterceptor"></bean>
    	
        <mvc:interceptor>
            <mvc:mapping path="/mvc/**"/>
            <bean class="com.zhong.interceptor.MyInterceptor">
            </bean>
        </mvc:interceptor>
        
        <mvc:interceptor>
        	<mvc:mapping path="/user/**"/>
        	<bean class="com.zhong.interceptor.MyInterceptor2"></bean>
        </mvc:interceptor>
    </mvc:interceptors>
    
    <!-- 
    	由上面的示例可以看出可以利用mvc:interceptors标签声明一系列的拦截器，然后它们就可以形成一个拦截器链，
    	拦截器的执行顺序是按声明的先后顺序执行的，先声明的拦截器中的preHandle方法会先执行
    	，然而它的postHandle方法和afterCompletion方法却会后执行。
          	在mvc:interceptors标签下声明interceptor主要有两种方式：
		                    （1）直接定义一个Interceptor实现类的bean对象。使用这种方式声明的Interceptor拦截器将会对所有的请求进行拦截。
		                    （2）使用mvc:interceptor标签进行声明。使用这种方式进行声明的Interceptor可以通过mvc:mapping子标签来定义需要进行拦截的请求路径。
     -->
</beans>
